fetch("https://smithery.ai/api/chat", {
  "headers": {
    "accept": "*/*",
    "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
    "content-type": "application/json",
    "priority": "u=1, i",
    "sec-ch-ua": "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"",
    "sec-ch-ua-mobile": "?0",
    "sec-ch-ua-platform": "\"macOS\"",
    "sec-fetch-dest": "empty",
    "sec-fetch-mode": "cors",
    "sec-fetch-site": "same-origin",
    "x-posthog-distinct-id": "dcdf92cf-6676-46c1-b288-29090c4610ad",
    "x-posthog-session-id": "019a1b0e-85ae-7be4-8052-8836b7f46e62",
    "x-posthog-window-id": "019a1b0e-85ae-7be4-8052-8837c5db8a5f",
    "cookie": "sb-spjawbfpwezjfmicopsl-auth-token.0=base64-eyJhY2Nlc3NfdG9rZW4iOiJleUpoYkdjaU9pSklVekkxTmlJc0ltdHBaQ0k2SWtrNE4wTjBVMVUyVUhGcldsVlZWMFFpTENKMGVYQWlPaUpLVjFRaWZRLmV5SnBjM01pT2lKb2RIUndjem92TDNOd2FtRjNZbVp3ZDJWNmFtWnRhV052Y0hOc0xuTjFjR0ZpWVhObExtTnZMMkYxZEdndmRqRWlMQ0p6ZFdJaU9pSmtZMlJtT1RKalppMDJOamMyTFRRMll6RXRZakk0T0MweU9UQTVNR00wTmpFd1lXUWlMQ0poZFdRaU9pSmhkWFJvWlc1MGFXTmhkR1ZrSWl3aVpYaHdJam94TnpZeE16azBNVE13TENKcFlYUWlPakUzTmpFek9UQTFNekFzSW1WdFlXbHNJam9pYzJoaGMzZGhkSEpoYWpOQVoyMWhhV3d1WTI5dElpd2ljR2h2Ym1VaU9pSWlMQ0poY0hCZmJXVjBZV1JoZEdFaU9uc2ljSEp2ZG1sa1pYSWlPaUpuYVhSb2RXSWlMQ0p3Y205MmFXUmxjbk1pT2xzaVoybDBhSFZpSWwxOUxDSjFjMlZ5WDIxbGRHRmtZWFJoSWpwN0ltRjJZWFJoY2w5MWNtd2lPaUpvZEhSd2N6b3ZMMkYyWVhSaGNuTXVaMmwwYUhWaWRYTmxjbU52Ym5SbGJuUXVZMjl0TDNVdk5qWTNNVE00TkRRX2RqMDBJaXdpWlcxaGFXd2lPaUp6YUdGemQyRjBjbUZxTTBCbmJXRnBiQzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpWm5Wc2JGOXVZVzFsSWpvaVUyaGhjM2RoZENCU1lXb2lMQ0pwYzNNaU9pSm9kSFJ3Y3pvdkwyRndhUzVuYVhSb2RXSXVZMjl0SWl3aWJtRnRaU0k2SWxOb1lYTjNZWFFnVW1GcUlpd2ljR2h2Ym1WZmRtVnlhV1pwWldRaU9tWmhiSE5sTENKd2NtVm1aWEp5WldSZmRYTmxjbTVoYldVaU9pSlRTREl3VWtGS0lpd2ljSEp2ZG1sa1pYSmZhV1FpT2lJMk5qY3hNemcwTkNJc0luTjFZaUk2SWpZMk56RXpPRFEwSWl3aWRYTmxjbDl1WVcxbElqb2lVMGd5TUZKQlNpSjlMQ0p5YjJ4bElqb2lZWFYwYUdWdWRHbGpZWFJsWkNJc0ltRmhiQ0k2SW1GaGJERWlMQ0poYlhJaU9sdDdJbTFsZEdodlpDSTZJbTloZFhSb0lpd2lkR2x0WlhOMFlXMXdJam94TnpZd01ERTJNRFE0ZlYwc0luTmxjM05wYjI1ZmFXUWlPaUkwTURNd05USmxaQzFsTW1JNUxUUmhNek10WW1Jd01TMDVaVFJsTXpBelpUa3lNekVpTENKcGMxOWhibTl1ZVcxdmRYTWlPbVpoYkhObGZRLkJGMEhsckl2Z3FXWEk3ZWdibXdyNXEzQnNGbjNndE1zOVY5ZzNjNnRrMmciLCJ0b2tlbl90eXBlIjoiYmVhcmVyIiwiZXhwaXJlc19pbiI6MzYwMCwiZXhwaXJlc19hdCI6MTc2MTM5NDEzMCwicmVmcmVzaF90b2tlbiI6InR2a2EzdHV4Z2V4cyIsInVzZXIiOnsiaWQiOiJkY2RmOTJjZi02Njc2LTQ2YzEtYjI4OC0yOTA5MGM0NjEwYWQiLCJhdWQiOiJhdXRoZW50aWNhdGVkIiwicm9sZSI6ImF1dGhlbnRpY2F0ZWQiLCJlbWFpbCI6InNoYXN3YXRyYWozQGdtYWlsLmNvbSIsImVtYWlsX2NvbmZpcm1lZF9hdCI6IjIwMjUtMDgtMjBUMDU6MTI6NTMuNjAxMDVaIiwicGhvbmUiOiIiLCJjb25maXJtZWRfYXQiOiIyMDI1LTA4LTIwVDA1OjEyOjUzLjYwMTA1WiIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMTAtMDlUMTM6MjA6NDguOTQ1NDY5WiIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImdpdGh1YiIsInByb3ZpZGVycyI6WyJnaXRodWIiXX0sInVzZXJfbWV0YWRhdGEiOnsiYXZhdGFyX3VybCI6Imh0dHBzOi8vYXZhdGFycy5naXRodWJ1c2VyY29udGVudC5jb20vdS82NjcxMzg0ND92PTQiLCJlbWFpbCI6InNoYXN3YXRyYWozQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJmdWxsX25hbWUiOiJTaGFzd2F0IFJhaiIsImlzcyI6Imh0dHBzOi8vYXBpLmdpdGh1Yi5jb20iLCJuYW1lIjoiU2hhc3dhdCBSYWoiLCJwaG9uZV92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6IlNIMjBSQUoiLCJwcm92aWRlcl9pZCI6IjY2NzEzODQ0Iiwic3ViIjoiNjY3MTM4NDQiLCJ1c2VyX25hbWUiOiJTSDIwUkFKIn0sImlkZW50aXRpZXMiOlt7ImlkZW50aXR5X2lkIjoiODY4YzhmOTAtMzU4Zi00NDc3LThiMDMtZDQ4OTQ1OWNiYmJlIiwiaWQiOiI2NjcxMzg0NCIsInVzZXJfaWQiOiJkY2RmOTJjZi02Njc2LTQ2YzEtYjI4OC0yOTA5MGM0NjEwYWQiLCJpZGVudGl0eV9kYXRhIjp7ImF2YXRhcl91cmwiOiJodHRwczovL2F2YXRhcnMuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3UvNjY3MTM4NDQ_dj00IiwiZW1haWwiOiJzaGFzd2F0cmFqM0BnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiZnVsbF9uYW1lIjoiU2hhc3dhdCBSYWoiLCJpc3MiOiJodHRwczovL2FwaS5naXRodWIuY29tIiwibmFtZSI6IlNoYXN3YXQgUmFqIiwicGhvbmVfdmVyaWZpZWQiOmZhbHNlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJTSDIwUkFKIiwicHJvdmlkZXJfaWQiOiI2NjcxMzg0NCIsInN1YiI6IjY2NzEzODQ0IiwidXNlcl9uYW1lIjoiU0gyM; sb-spjawbfpwezjfmicopsl-auth-token.1=FJBSiJ9LCJwcm92aWRlciI6ImdpdGh1YiIsImxhc3Rfc2lnbl9pbl9hdCI6IjIwMjUtMDgtMjBUMDU6MTI6NTMuNTk3MDY5WiIsImNyZWF0ZWRfYXQiOiIyMDI1LTA4LTIwVDA1OjEyOjUzLjU5NzExOVoiLCJ1cGRhdGVkX2F0IjoiMjAyNS0xMC0wOVQxMzoyMDo0Ny41MzA4NjJaIiwiZW1haWwiOiJzaGFzd2F0cmFqM0BnbWFpbC5jb20ifV0sImNyZWF0ZWRfYXQiOiIyMDI1LTA4LTIwVDA1OjEyOjUzLjU5Mzg2MloiLCJ1cGRhdGVkX2F0IjoiMjAyNS0xMC0yNVQxMTowODo0Ni4yMTQxMjFaIiwiaXNfYW5vbnltb3VzIjpmYWxzZX19; ph_phc_WiMP1Rj0YvrdwYVYdE0AdRBNmB8MTdbsWY8oalxSrts_posthog=%7B%22distinct_id%22%3A%22dcdf92cf-6676-46c1-b288-29090c4610ad%22%2C%22%24sesid%22%3A%5B1761392463415%2C%22019a1b0e-85ae-7be4-8052-8836b7f46e62%22%2C1761390527918%5D%2C%22%24epp%22%3Atrue%2C%22%24initial_person_info%22%3A%7B%22r%22%3A%22https%3A%2F%2Fwww.npmjs.com%2F%22%2C%22u%22%3A%22https%3A%2F%2Fsmithery.ai%2Fserver%2F%40hugeicons%2Fmcp-server%22%7D%7D",
    "Referer": "https://smithery.ai/server/@upstash/context7-mcp",
    "Referrer-Policy": "strict-origin-when-cross-origin"
  },
  "body": "{\"messages\":[{\"parts\":[{\"type\":\"text\",\"text\":\"hello\"}],\"id\":\"elDmViSf83yeplFg\",\"role\":\"user\"},{\"id\":\"JmDGjxDJ4dMT8yTS\",\"metadata\":{\"usage\":{\"inputTokens\":1155,\"outputTokens\":111,\"totalTokens\":1266},\"model\":\"claude-haiku-4.5\",\"duration\":2002},\"role\":\"assistant\",\"parts\":[{\"type\":\"step-start\"},{\"type\":\"text\",\"text\":\"Hello! 👋 I'm here to help you with documentation and information about libraries and packages. \\n\\nI can help you with things like:\\n- **Finding documentation** for specific libraries or packages\\n- **Looking up information** about how to use certain tools or frameworks\\n- **Resolving library names** to their exact documentation sources\\n\\nWhat library or package would you like to learn about today? Just let me know the name or what you're trying to do, and I'll fetch the relevant documentation for you!\",\"state\":\"done\"}]},{\"parts\":[{\"type\":\"text\",\"text\":\"can you use context7 mcp to find about qwik\"}],\"id\":\"7Urj0CYWqUOwlozc\",\"role\":\"user\"},{\"id\":\"RSVFjuewnZeRxqWM\",\"metadata\":{\"usage\":{\"inputTokens\":4258,\"outputTokens\":113,\"totalTokens\":4371},\"model\":\"claude-haiku-4.5\",\"duration\":2723},\"role\":\"assistant\",\"parts\":[{\"type\":\"step-start\"},{\"type\":\"tool-resolve-library-id\",\"toolCallId\":\"tooluse_A3_wI2IZQ_S8Y-XJfTLF8w\",\"state\":\"output-available\",\"input\":{\"libraryName\":\"qwik\"},\"output\":{\"content\":[{\"type\":\"text\",\"text\":\"Available Libraries (top matches):\\n\\nEach result includes:\\n- Library ID: Context7-compatible identifier (format: /org/project)\\n- Name: Library or package name\\n- Description: Short summary\\n- Code Snippets: Number of available code examples\\n- Trust Score: Authority indicator\\n- Versions: List of versions if available. Use one of those versions if the user provides a version in their query. The format of the version is /org/project/version.\\n\\nFor best results, select libraries based on name match, trust score, snippet coverage, and relevance to your use case.\\n\\n----------\\n\\n- Title: Qwik\\n- Context7-compatible library ID: /qwikdev/qwik\\n- Description: Qwik is a web framework that enables the fastest possible page load times by delivering fully interactive sites with minimal JavaScript and on-demand loading of necessary code.\\n- Code Snippets: 1944\\n- Trust Score: 7.1\\n----------\\n- Title: Flowbite Qwik\\n- Context7-compatible library ID: /qwikerx/flowbite-qwik\\n- Description: Flowbite Qwik is an open-source collection of UI components built with Qwik and Tailwind CSS, designed to accelerate website development.\\n- Code Snippets: 9\\n- Trust Score: 4.3\\n----------\\n- Title: Qwik PWA\\n- Context7-compatible library ID: /qwikcommunity/pwa\\n- Description: Qwik PWA is a plugin that simplifies turning Qwik Applications into offline-compatible Progressive Web Applications (PWAs) using Workbox, offering features like precaching, manifest generation, and service worker setup.\\n- Code Snippets: 14\\n- Trust Score: 5.2\\n----------\\n- Title: jqwik\\n- Context7-compatible library ID: /jqwik-team/jqwik\\n- Description: jqwik is a property-based testing engine for the JUnit 5 platform, enabling developers to write more robust and reliable Java code.\\n- Code Snippets: 201\\n- Trust Score: 6.6\\n----------\\n- Title: Qwik Date\\n- Context7-compatible library ID: /diecodev/qwik-date\\n- Description: Qwik Date is an opinionated calendar component for the Qwik framework, offering both inline calendar and popup date picker functionalities for flexible integration.\\n- Code Snippets: 10\\n- Trust Score: 7.4\\n----------\\n- Title: Qwik Speak\\n- Context7-compatible library ID: /robisim74/qwik-speak\\n- Description: Translate your Qwik apps into any language\\n- Code Snippets: 133\\n- Trust Score: 8.8\\n----------\\n- Title: Qwik Astro\\n- Context7-compatible library ID: /websites/qwik_dev\\n- Description: Qwik Astro is an integration that allows developers to leverage Qwik components within the Astro meta-framework, enabling fast, resumable, and SEO-friendly web development with JavaScript Streaming.\\n- Code Snippets: 626\\n- Trust Score: 7.5\\n----------\\n- Title: Kwik\\n- Context7-compatible library ID: /dmezzogori/kwik\\n- Description: Kwik is a fast, batteries-included, business-oriented, opinionated REST APIs framework built on FastAPI, Pydantic, and SQLAlchemy.\\n- Code Snippets: 42\\n- Trust Score: 5.8\\n----------\\n- Title: Mink\\n- Context7-compatible library ID: /kevinzakka/mink\\n- Description: Mink is a Python library for differential inverse kinematics, leveraging the MuJoCo physics engine for features like task specification, joint limits, collision avoidance, and closed-chain kinematics.\\n- Code Snippets: 34\\n- Trust Score: 9.3\\n----------\\n- Title: QuTiP\\n- Context7-compatible library ID: /qutip/qutip\\n- Description: QuTiP is an open-source Python toolbox for simulating the dynamics of quantum systems, offering efficient numerical solutions for various quantum mechanical problems.\\n- Code Snippets: 576\\n- Trust Score: 7.6\\n----------\\n- Title: Quantum Instrumentation Control Kit\\n- Context7-compatible library ID: /openquantumhardware/qick\\n- Description: QICK: Quantum Instrumentation Control Kit\\n- Code Snippets: 188\\n- Trust Score: 6.9\\n----------\\n- Title: zk-nvim\\n- Context7-compatible library ID: /zk-org/zk-nvim\\n- Description: zk-nvim is a Neovim extension designed to integrate with and enhance the `zk` plain text note-taking assistant.\\n- Code Snippets: 66\\n- Trust Score: 5.6\\n----------\\n- Title: Qiskit\\n- Context7-compatible library ID: /qiskit/qiskit\\n- Description: Qiskit is an open-source SDK for working with quantum computers, providing tools for creating quantum circuits, operators, and primitives like Sampler and Estimator.\\n- Code Snippets: 134\\n- Trust Score: 9.2\\n----------\\n- Title: QWeather\\n- Context7-compatible library ID: /qwd/dev-site\\n- Description: The official website for the QWeather development platform, built with Jekyll and hosted on GitHub, providing information and resources for developers.\\n- Code Snippets: 357\\n- Trust Score: 8.6\\n----------\\n- Title: QMK Firmware\\n- Context7-compatible library ID: /qmk/qmk_firmware\\n- Description: QMK Firmware is a keyboard firmware based on tmk_keyboard, offering features for Atmel AVR and ARM controllers, supporting various custom keyboards like Planck, Preonic, and ErgoDox EZ.\\n- Code Snippets: 10421\\n- Trust Score: 8.2\\n----------\\n- Title: QwQ AI (llmstxt)\\n- Context7-compatible library ID: /llmstxt/qwq32-llms-full.txt\\n- Description: QwQ AI is a free platform aggregating multiple LLMs, offering comparison analysis and direct access to high-quality AI models via a simple question-answering interface.\\n- Code Snippets: 23\\n- Trust Score: 8\\n----------\\n- Title: PyKX\\n- Context7-compatible library ID: /kxsystems/pykx\\n- Description: PyKX is a Python first interface to the worlds fastest time-series database kdb+ and it's underlying vector programming language q.\\n- Code Snippets: 1226\\n- Trust Score: 8.3\\n----------\\n- Title: TQUIC\\n- Context7-compatible library ID: /tencent/tquic\\n- Description: A high-performance, lightweight, and cross-platform QUIC library\\n- Code Snippets: 4\\n- Trust Score: 9\\n----------\\n- Title: Vial\\n- Context7-compatible library ID: /vial-kb/vial-gui\\n- Description: Vial is an open-source, cross-platform GUI and QMK fork for real-time keyboard configuration.\\n- Code Snippets: 16\\n- Trust Score: 7.3\\n----------\\n- Title: Qsv\\n- Context7-compatible library ID: /dathere/qsv\\n- Description: qsv is a command-line toolkit for querying, slicing, indexing, analyzing, filtering, enriching, transforming, sorting, validating, joining, formatting, and converting tabular data with blazing-fast performance.\\n- Code Snippets: 150\\n- Trust Score: 7.8\\n----------\\n- Title: wrk\\n- Context7-compatible library ID: /wg/wrk\\n- Description: wrk is a modern HTTP benchmarking tool that uses a multithreaded design and scalable event notification systems to generate significant load from a single multi-core CPU, with optional LuaJIT scripting for custom request generation and processing.\\n- Code Snippets: 2\\n- Trust Score: 8.4\\n----------\\n- Title: pykiwoom: 퀀트투자를 위한 키움증권 API (파이썬 버전)\\n- Context7-compatible library ID: /websites/wikidocs_net-77479\\n- Description: This documentation guides users through installing and utilizing the pykiwoom module, a Python library designed to simplify interaction with the Kiwoom Securities Open API+ for quantitative investing.\\n- Code Snippets: 2\\n- Trust Score: 7.5\\n----------\\n- Title: Quarkslab Bindiffer\\n- Context7-compatible library ID: /quarkslab/qbindiff\\n- Description: QBinDiff is an experimental binary diffing tool that addresses the diffing process as a Network Alignment Quadratic Problem, offering programmatic control over feature definition, match enforcement, and emphasis on content similarity or call graph structure.\\n- Code Snippets: 135\\n- Trust Score: 7.8\\n----------\\n- Title: QuikChat\\n- Context7-compatible library ID: /deftio/quikchat\\n- Description: QuikChat is a zero-dependency, highly customizable JavaScript chat widget for modern web applications, offering LLM integration, real-time chat, and responsive design.\\n- Code Snippets: 156\\n- Trust Score: 8\\n----------\\n- Title: Qlib\\n- Context7-compatible library ID: /microsoft/qlib\\n- Description: Qlib is a quantitative investment analysis framework that supports automated factor mining and model optimization for quant investment R&D.\\n- Code Snippets: 348\\n- Trust Score: 9.9\\n----------\\n- Title: Qiq\\n- Context7-compatible library ID: /qiqphp/qiq\\n- Description: Qiq provides a PHP 8.1+ implementation of the TemplateView pattern, using PHP as the templating language with optional {{...}} syntax for concise escaping and helper use.\\n- Code Snippets: 108\\n- Trust Score: 3.5\\n----------\\n- Title: Qt Quick\\n- Context7-compatible library ID: /websites/doc_qt_io_qt-6\\n- Description: Qt Quick is the standard library for writing QML applications, providing essential types for creating user interfaces with QML, including a visual canvas and support for animations, user input, and data models.\\n- Code Snippets: 52189\\n- Trust Score: 7.5\\n----------\\n- Title: QMPy\\n- Context7-compatible library ID: /wolverton-research-group/qmpy\\n- Description: Qmpy is a toolkit for storing crystal structure data, automating density-functional calculations, handling computational resources, and performing thermodynamic analysis, used for the Open Quantum Materials Database.\\n- Code Snippets: 82\\n- Trust Score: 5.9\\n----------\\n- Title: qBraid\\n- Context7-compatible library ID: /websites/qbraid\\n- Description: qBraid is a comprehensive platform providing an integrated development environment (IDE), SDK, APIs, and tools for quantum computing development and managing quantum jobs.\\n- Code Snippets: 356\\n- Trust Score: 7.5\\n----------\\n- Title: Kwyjibo\\n- Context7-compatible library ID: /dmvjs/kwyjibo\\n- Description: Kwyjibo is a JavaScript-powered DJ application that dynamically and randomly mixes audio files based on tempo and musical key to create continuous, on-key musical sets.\\n- Code Snippets: 17\\n- Trust Score: 8.9\"}]}},{\"type\":\"step-start\"},{\"type\":\"text\",\"text\":\"Great! I found the main **Qwik** framework. Now let me fetch the documentation for you:\",\"state\":\"done\"},{\"type\":\"tool-get-library-docs\",\"toolCallId\":\"tooluse_0xf_SYAeTKuH6OIqbkyWBw\",\"state\":\"output-available\",\"input\":{\"context7CompatibleLibraryID\":\"/qwikdev/qwik\",\"tokens\":5000},\"output\":{\"content\":[{\"type\":\"text\",\"text\":\"# Qwik Framework\\n\\nQwik is a revolutionary web framework that delivers instant-loading web applications by fundamentally rethinking how JavaScript is loaded and executed. Unlike traditional frameworks that hydrate the entire application on the client, Qwik uses resumability to serialize the application state on the server and resume execution on the client without replaying logic. This approach enables Qwik to load minimal JavaScript upfront and fetch additional code only when user interactions require it, resulting in near-zero initial JavaScript and blazing-fast time-to-interactive metrics.\\n\\nThe framework achieves its performance through precision lazy-loading powered by the Qwik Optimizer, which automatically extracts component boundaries and event handlers into separate chunks. Qwik components are declared using `component$()` where the `$` suffix signals the optimizer to create lazy-loadable boundaries. State management is handled through reactive stores and signals that automatically track dependencies and trigger efficient updates. The framework includes Qwik City, a meta-framework providing file-based routing, server-side rendering, data loading, and deployment adapters for various platforms.\\n\\n## Core API\\n\\n### Creating Components with component$\\n\\nComponent declaration using the `$` optimizer marker for lazy-loading boundaries.\\n\\n```tsx\\nimport { component$, useStore, useSignal, $ } from '@builder.io/qwik';\\n\\n// Basic component with props\\ninterface CounterProps {\\n  initialValue?: number;\\n  step?: number;\\n}\\n\\nexport const Counter = component$((props: CounterProps) => {\\n  const state = useStore({ count: props.initialValue || 0 });\\n\\n  return (\\n    <div>\\n      <span>Count: {state.count}</span>\\n      <button onClick$={() => (state.count += props.step || 1)}>\\n        Increment\\n      </button>\\n    </div>\\n  );\\n});\\n\\n// Nested component usage\\nexport const App = component$(() => {\\n  return (\\n    <div>\\n      <h1>Counter Demo</h1>\\n      <Counter initialValue={100} step={5} />\\n    </div>\\n  );\\n});\\n```\\n\\n### Reactive State with useStore\\n\\nDeep reactive state management with automatic proxy-based change tracking.\\n\\n```tsx\\nimport { component$, useStore, useVisibleTask$ } from '@builder.io/qwik';\\n\\ninterface UserData {\\n  name: string;\\n  address: {\\n    street: string;\\n    city: string;\\n  };\\n  tags: string[];\\n}\\n\\nexport const UserProfile = component$(() => {\\n  // Reactive store with deep tracking\\n  const userData = useStore<UserData>({\\n    name: 'Manu',\\n    address: {\\n      street: '123 Main St',\\n      city: 'San Francisco',\\n    },\\n    tags: ['developer', 'qwik'],\\n  });\\n\\n  // Non-reactive store (opt-out)\\n  const config = useStore({ theme: 'dark' }, { reactive: false });\\n\\n  // Shallow tracking only\\n  const shallowState = useStore({ items: [] }, { deep: false });\\n\\n  // Lazy initialization with function\\n  const expensiveState = useStore(() => {\\n    return {\\n      data: computeExpensiveValue(),\\n      timestamp: Date.now(),\\n    };\\n  });\\n\\n  return (\\n    <div>\\n      <input\\n        value={userData.name}\\n        onInput$={(e) => (userData.name = e.target.value)}\\n      />\\n      <input\\n        value={userData.address.city}\\n        onInput$={(e) => (userData.address.city = e.target.value)}\\n      />\\n      <button onClick$={() => userData.tags.push('new-tag')}>\\n        Add Tag\\n      </button>\\n      <p>Tags: {userData.tags.join(', ')}</p>\\n    </div>\\n  );\\n});\\n\\nfunction computeExpensiveValue() {\\n  return { computed: 'expensive-result' };\\n}\\n```\\n\\n### Signals with useSignal\\n\\nLightweight primitive reactive values for simple state management.\\n\\n```tsx\\nimport { component$, useSignal, useComputed$ } from '@builder.io/qwik';\\n\\nexport const SignalExample = component$(() => {\\n  const count = useSignal(0);\\n  const name = useSignal<string>(); // undefined initial value\\n\\n  // Computed signal that derives from other signals\\n  const doubleCount = useComputed$(() => count.value * 2);\\n\\n  // Lazy initialization\\n  const expensiveSignal = useSignal(() => {\\n    return Math.random() * 1000;\\n  });\\n\\n  return (\\n    <div>\\n      <p>Count: {count.value}</p>\\n      <p>Double: {doubleCount.value}</p>\\n      <button onClick$={() => count.value++}>Increment</button>\\n      <button onClick$={() => (count.value = 0)}>Reset</button>\\n\\n      <input\\n        value={name.value}\\n        onInput$={(e) => (name.value = e.target.value)}\\n        placeholder=\\\"Enter name\\\"\\n      />\\n      <p>Hello, {name.value || 'stranger'}!</p>\\n    </div>\\n  );\\n});\\n```\\n\\n### Event Handlers with $ and QRL\\n\\nLazy-loadable event handlers using the Qwik optimizer.\\n\\n```tsx\\nimport { component$, $, useStore, useSignal } from '@builder.io/qwik';\\n\\nexport const EventHandlers = component$(() => {\\n  const state = useStore({ clicks: 0, lastEvent: '' });\\n  const inputValue = useSignal('');\\n\\n  // Inline event handler with $ marker\\n  const handleClick = $((event: MouseEvent) => {\\n    state.clicks++;\\n    state.lastEvent = 'click';\\n    console.log('Clicked at', event.clientX, event.clientY);\\n  });\\n\\n  // Multiple handlers can be combined\\n  const handleInput = $((event: Event, element: HTMLInputElement) => {\\n    inputValue.value = element.value;\\n  });\\n\\n  // Event handler with captured state\\n  const multiplier = 2;\\n  const handleSpecialClick = $(() => {\\n    state.clicks += multiplier; // Captures multiplier\\n  });\\n\\n  return (\\n    <div>\\n      <button onClick$={handleClick}>Click me</button>\\n      <button onClick$={() => state.clicks++}>Inline Handler</button>\\n      <button onClick$={handleSpecialClick}>Special Click</button>\\n\\n      <input\\n        type=\\\"text\\\"\\n        value={inputValue.value}\\n        onInput$={handleInput}\\n      />\\n\\n      <div onMouseMove$={(event) => {\\n        console.log('Mouse at:', event.clientX, event.clientY);\\n      }}>\\n        Hover over me\\n      </div>\\n\\n      <p>Clicks: {state.clicks}</p>\\n      <p>Last event: {state.lastEvent}</p>\\n    </div>\\n  );\\n});\\n```\\n\\n### Context API for Dependency Injection\\n\\nType-safe context for sharing data across component trees.\\n\\n```tsx\\nimport {\\n  component$,\\n  createContextId,\\n  useContextProvider,\\n  useContext,\\n  useStore,\\n  Slot,\\n} from '@builder.io/qwik';\\n\\n// Define context types and create context IDs\\ninterface AppState {\\n  user: string;\\n  theme: 'light' | 'dark';\\n  count: number;\\n}\\n\\nconst AppContext = createContextId<AppState>('app-context');\\nconst ThemeContext = createContextId<string>('theme-context');\\n\\n// Provider component\\nexport const AppProvider = component$(() => {\\n  const appState = useStore<AppState>({\\n    user: 'John Doe',\\n    theme: 'light',\\n    count: 0,\\n  });\\n\\n  const themeValue = 'dark-mode';\\n\\n  // Provide contexts to children\\n  useContextProvider(AppContext, appState);\\n  useContextProvider(ThemeContext, themeValue);\\n\\n  return (\\n    <div>\\n      <h1>App Provider</h1>\\n      <Slot />\\n    </div>\\n  );\\n});\\n\\n// Consumer component\\nexport const ThemeDisplay = component$(() => {\\n  const appState = useContext(AppContext);\\n  const theme = useContext(ThemeContext);\\n\\n  return (\\n    <div>\\n      <p>User: {appState.user}</p>\\n      <p>Theme: {appState.theme}</p>\\n      <p>Theme Context: {theme}</p>\\n      <button onClick$={() => appState.count++}>\\n        Count: {appState.count}\\n      </button>\\n      <button onClick$={() => {\\n        appState.theme = appState.theme === 'light' ? 'dark' : 'light';\\n      }}>\\n        Toggle Theme\\n      </button>\\n    </div>\\n  );\\n});\\n\\n// Root usage\\nexport const ContextApp = component$(() => {\\n  return (\\n    <AppProvider>\\n      <ThemeDisplay />\\n    </AppProvider>\\n  );\\n});\\n```\\n\\n### Tasks and Effects with useTask$\\n\\nServer and client-side reactive effects that track dependencies.\\n\\n```tsx\\nimport {\\n  component$,\\n  useSignal,\\n  useStore,\\n  useTask$,\\n  useVisibleTask$,\\n} from '@builder.io/qwik';\\n\\nexport const TaskExample = component$(() => {\\n  const count = useSignal(0);\\n  const store = useStore({ doubleCount: 0, log: [] as string[] });\\n\\n  // useTask$ runs on both server and client\\n  // Tracks dependencies and re-runs when they change\\n  useTask$(({ track }) => {\\n    // Track count signal - task re-runs when count changes\\n    const currentCount = track(() => count.value);\\n\\n    // Update derived state\\n    store.doubleCount = currentCount * 2;\\n    store.log.push(`Count changed to ${currentCount}`);\\n\\n    // Cleanup function\\n    return () => {\\n      console.log('Task cleanup');\\n    };\\n  });\\n\\n  // useVisibleTask$ runs only on client when component becomes visible\\n  useVisibleTask$(({ track }) => {\\n    const currentCount = track(() => count.value);\\n\\n    // Client-only side effects\\n    const timer = setInterval(() => {\\n      console.log('Timer tick', currentCount);\\n    }, 1000);\\n\\n    // Cleanup\\n    return () => {\\n      clearInterval(timer);\\n    };\\n  });\\n\\n  // Eager task - runs immediately without waiting for component render\\n  useTask$({ eagerness: 'load' }, ({ track }) => {\\n    track(() => count.value);\\n    console.log('Eager task executed');\\n  });\\n\\n  return (\\n    <div>\\n      <button onClick$={() => count.value++}>\\n        Count: {count.value}\\n      </button>\\n      <p>Double: {store.doubleCount}</p>\\n      <ul>\\n        {store.log.map((entry, i) => (\\n          <li key={i}>{entry}</li>\\n        ))}\\n      </ul>\\n    </div>\\n  );\\n});\\n```\\n\\n### Resources with useResource$\\n\\nAsynchronous data loading with built-in loading and error states.\\n\\n```tsx\\nimport {\\n  component$,\\n  useResource$,\\n  Resource,\\n  useSignal,\\n} from '@builder.io/qwik';\\n\\ninterface User {\\n  id: number;\\n  name: string;\\n  email: string;\\n}\\n\\nexport const ResourceExample = component$(() => {\\n  const userId = useSignal(1);\\n\\n  // Resource automatically tracks dependencies and refetches\\n  const userResource = useResource$<User>(async ({ track, cleanup }) => {\\n    // Track the userId signal\\n    const id = track(() => userId.value);\\n\\n    // Set up cleanup for AbortController\\n    const controller = new AbortController();\\n    cleanup(() => controller.abort());\\n\\n    // Fetch data\\n    const response = await fetch(\\n      `https://jsonplaceholder.typicode.com/users/${id}`,\\n      { signal: controller.signal }\\n    );\\n\\n    if (!response.ok) {\\n      throw new Error(`Failed to fetch user ${id}`);\\n    }\\n\\n    return response.json();\\n  });\\n\\n  return (\\n    <div>\\n      <h1>User Profile</h1>\\n\\n      <button onClick$={() => userId.value--}>Previous</button>\\n      <button onClick$={() => userId.value++}>Next</button>\\n\\n      <Resource\\n        value={userResource}\\n        onPending={() => <div>Loading user...</div>}\\n        onRejected={(error) => <div>Error: {error.message}</div>}\\n        onResolved={(user) => (\\n          <div>\\n            <h2>{user.name}</h2>\\n            <p>Email: {user.email}</p>\\n            <p>ID: {user.id}</p>\\n          </div>\\n        )}\\n      />\\n    </div>\\n  );\\n});\\n```\\n\\n## Qwik City API\\n\\n### Route Loaders with routeLoader$\\n\\nServer-side data loading that runs before component rendering.\\n\\n```tsx\\n// routes/product/[id]/index.tsx\\nimport { component$ } from '@builder.io/qwik';\\nimport { routeLoader$ } from '@builder.io/qwik-city';\\nimport type { RequestEvent } from '@builder.io/qwik-city';\\n\\ninterface Product {\\n  id: string;\\n  name: string;\\n  price: number;\\n  description: string;\\n}\\n\\n// Loader runs on server before page renders\\nexport const useProductData = routeLoader$<Product>(async (requestEvent) => {\\n  const productId = requestEvent.params.id;\\n\\n  // Access request headers, cookies, etc.\\n  const authToken = requestEvent.cookie.get('auth_token');\\n\\n  const response = await fetch(\\n    `https://api.example.com/products/${productId}`,\\n    {\\n      headers: {\\n        Authorization: `Bearer ${authToken?.value}`,\\n      },\\n    }\\n  );\\n\\n  if (!response.ok) {\\n    throw requestEvent.error(404, 'Product not found');\\n  }\\n\\n  return response.json();\\n});\\n\\n// Multiple loaders can be used in the same route\\nexport const useRelatedProducts = routeLoader$<Product[]>(async (requestEvent) => {\\n  const productId = requestEvent.params.id;\\n  const response = await fetch(\\n    `https://api.example.com/products/${productId}/related`\\n  );\\n  return response.json();\\n});\\n\\n// Component uses loader data\\nexport default component$(() => {\\n  const productSignal = useProductData();\\n  const relatedSignal = useRelatedProducts();\\n\\n  const product = productSignal.value;\\n  const related = relatedSignal.value;\\n\\n  return (\\n    <div>\\n      <h1>{product.name}</h1>\\n      <p>Price: ${product.price}</p>\\n      <p>{product.description}</p>\\n\\n      <h2>Related Products</h2>\\n      <ul>\\n        {related.map((p) => (\\n          <li key={p.id}>{p.name}</li>\\n        ))}\\n      </ul>\\n    </div>\\n  );\\n});\\n```\\n\\n### Route Actions with routeAction$\\n\\nServer-side form handling and mutations with type-safe validation.\\n\\n```tsx\\n// routes/contact/index.tsx\\nimport { component$ } from '@builder.io/qwik';\\nimport { routeAction$, Form, zod$, z } from '@builder.io/qwik-city';\\n\\n// Define validation schema\\nconst contactSchema = z.object({\\n  name: z.string().min(2, 'Name must be at least 2 characters'),\\n  email: z.string().email('Invalid email address'),\\n  message: z.string().min(10, 'Message must be at least 10 characters'),\\n});\\n\\n// Server action with validation\\nexport const useContactAction = routeAction$(\\n  async (data, requestEvent) => {\\n    // Data is validated and typed\\n    const { name, email, message } = data;\\n\\n    // Perform server-side operations\\n    const response = await fetch('https://api.example.com/contact', {\\n      method: 'POST',\\n      headers: { 'Content-Type': 'application/json' },\\n      body: JSON.stringify({ name, email, message }),\\n    });\\n\\n    if (!response.ok) {\\n      return requestEvent.fail(500, {\\n        message: 'Failed to send message',\\n      });\\n    }\\n\\n    // Return success response\\n    return {\\n      success: true,\\n      message: 'Message sent successfully!',\\n    };\\n  },\\n  zod$(contactSchema) // Apply Zod validation\\n);\\n\\n// Component with form\\nexport default component$(() => {\\n  const action = useContactAction();\\n\\n  return (\\n    <div>\\n      <h1>Contact Us</h1>\\n\\n      <Form action={action}>\\n        <input\\n          name=\\\"name\\\"\\n          type=\\\"text\\\"\\n          placeholder=\\\"Your name\\\"\\n          required\\n        />\\n        {action.value?.fieldErrors?.name && (\\n          <p class=\\\"error\\\">{action.value.fieldErrors.name}</p>\\n        )}\\n\\n        <input\\n          name=\\\"email\\\"\\n          type=\\\"email\\\"\\n          placeholder=\\\"Your email\\\"\\n          required\\n        />\\n        {action.value?.fieldErrors?.email && (\\n          <p class=\\\"error\\\">{action.value.fieldErrors.email}</p>\\n        )}\\n\\n        <textarea\\n          name=\\\"message\\\"\\n          placeholder=\\\"Your message\\\"\\n          required\\n        />\\n        {action.value?.fieldErrors?.message && (\\n          <p class=\\\"error\\\">{action.value.fieldErrors.message}</p>\\n        )}\\n\\n        <button type=\\\"submit\\\" disabled={action.isRunning}>\\n          {action.isRunning ? 'Sending...' : 'Send Message'}\\n        </button>\\n      </Form>\\n\\n      {action.value?.success && (\\n        <div class=\\\"success\\\">{action.value.message}</div>\\n      )}\\n\\n      {action.value?.failed && (\\n        <div class=\\\"error\\\">Failed: {action.value.message}</div>\\n      )}\\n    </div>\\n  );\\n});\\n```\\n\\n### Server Functions with server$\\n\\nRun server-only code from client components.\\n\\n```tsx\\nimport { component$, useSignal } from '@builder.io/qwik';\\nimport { server$ } from '@builder.io/qwik-city';\\n\\n// Server function - only runs on server\\nconst checkInventory = server$(async function(productId: string) {\\n  // Access server-only resources\\n  const db = await connectToDatabase();\\n\\n  // This context is available in server functions\\n  const userAgent = this.request.headers.get('user-agent');\\n  const clientIp = this.request.headers.get('x-forwarded-for');\\n\\n  // Perform server-only operations\\n  const inventory = await db.query(\\n    'SELECT quantity FROM inventory WHERE product_id = ?',\\n    [productId]\\n  );\\n\\n  // Access environment variables\\n  const apiKey = this.env.get('INTERNAL_API_KEY');\\n\\n  return {\\n    available: inventory.quantity > 0,\\n    quantity: inventory.quantity,\\n  };\\n});\\n\\n// Another server function with side effects\\nconst processOrder = server$(async function(\\n  orderId: string,\\n  items: Array<{ id: string; quantity: number }>\\n) {\\n  const db = await connectToDatabase();\\n\\n  // Transaction handling\\n  await db.transaction(async (trx) => {\\n    for (const item of items) {\\n      await trx.execute(\\n        'UPDATE inventory SET quantity = quantity - ? WHERE product_id = ?',\\n        [item.quantity, item.id]\\n      );\\n    }\\n\\n    await trx.execute(\\n      'INSERT INTO orders (id, status, created_at) VALUES (?, ?, ?)',\\n      [orderId, 'pending', new Date()]\\n    );\\n  });\\n\\n  // Send notification\\n  await fetch('https://api.example.com/notify', {\\n    method: 'POST',\\n    body: JSON.stringify({ orderId }),\\n  });\\n\\n  return { success: true, orderId };\\n});\\n\\n// Component using server functions\\nexport default component$(() => {\\n  const productId = useSignal('prod-123');\\n  const inventory = useSignal<{ available: boolean; quantity: number } | null>(null);\\n\\n  return (\\n    <div>\\n      <button\\n        onClick$={async () => {\\n          // Call server function from client\\n          const result = await checkInventory(productId.value);\\n          inventory.value = result;\\n        }}\\n      >\\n        Check Inventory\\n      </button>\\n\\n      {inventory.value && (\\n        <div>\\n          <p>Available: {inventory.value.available ? 'Yes' : 'No'}</p>\\n          <p>Quantity: {inventory.value.quantity}</p>\\n        </div>\\n      )}\\n\\n      <button\\n        onClick$={async () => {\\n          const result = await processOrder('order-456', [\\n            { id: 'prod-123', quantity: 2 },\\n          ]);\\n          console.log('Order processed:', result.orderId);\\n        }}\\n      >\\n        Process Order\\n      </button>\\n    </div>\\n  );\\n});\\n\\nasync function connectToDatabase() {\\n  return {\\n    query: async (sql: string, params: any[]) => ({ quantity: 10 }),\\n    transaction: async (fn: any) => await fn({ execute: async () => {} }),\\n  };\\n}\\n```\\n\\n### Navigation and Routing\\n\\nClient-side navigation and route information access.\\n\\n```tsx\\nimport { component$ } from '@builder.io/qwik';\\nimport {\\n  Link,\\n  useLocation,\\n  useNavigate,\\n  useDocumentHead,\\n} from '@builder.io/qwik-city';\\n\\nexport default component$(() => {\\n  const location = useLocation();\\n  const navigate = useNavigate();\\n  const documentHead = useDocumentHead();\\n\\n  return (\\n    <div>\\n      {/* Link component for SPA navigation */}\\n      <Link href=\\\"/products\\\">Products</Link>\\n      <Link href=\\\"/about\\\" prefetch>About (prefetched)</Link>\\n\\n      {/* Access route information */}\\n      <div>\\n        <p>Current URL: {location.url.href}</p>\\n        <p>Pathname: {location.url.pathname}</p>\\n        <p>Search: {location.url.search}</p>\\n        <p>Route params: {JSON.stringify(location.params)}</p>\\n        <p>Is navigating: {location.isNavigating ? 'Yes' : 'No'}</p>\\n      </div>\\n\\n      {/* Document head info */}\\n      <div>\\n        <p>Page title: {documentHead.title}</p>\\n        <p>Meta tags: {documentHead.meta.length}</p>\\n      </div>\\n\\n      {/* Programmatic navigation */}\\n      <button\\n        onClick$={() => {\\n          navigate('/dashboard');\\n        }}\\n      >\\n        Go to Dashboard\\n      </button>\\n\\n      <button\\n        onClick$={async () => {\\n          // Navigate with scroll to top\\n          await navigate('/profile', { scroll: true });\\n        }}\\n      >\\n        Go to Profile\\n      </button>\\n\\n      <button\\n        onClick$={() => {\\n          // Replace current history entry\\n          navigate('/login', { replaceState: true });\\n        }}\\n      >\\n        Login (replace)\\n      </button>\\n\\n      {/* Navigate back/forward */}\\n      <button onClick$={() => navigate(-1)}>Back</button>\\n      <button onClick$={() => navigate(1)}>Forward</button>\\n    </div>\\n  );\\n});\\n```\\n\\n## Build Configuration\\n\\n### Vite Plugin Setup\\n\\nConfigure Qwik with Vite for optimal development and production builds.\\n\\n```typescript\\n// vite.config.ts\\nimport { defineConfig, type UserConfig } from 'vite';\\nimport { qwikVite } from '@builder.io/qwik/optimizer';\\nimport { qwikCity } from '@builder.io/qwik-city/vite';\\nimport tsconfigPaths from 'vite-tsconfig-paths';\\n\\nexport default defineConfig((): UserConfig => {\\n  return {\\n    plugins: [\\n      qwikCity({\\n        // Qwik City options\\n        routesDir: './src/routes',\\n        basePathname: '/',\\n        trailingSlash: false,\\n\\n        // MDX support\\n        mdxPlugins: {\\n          remarkGfm: true,\\n          rehypeSyntaxHighlight: true,\\n        },\\n\\n        // Static site generation\\n        staticGenerate: {\\n          include: ['/about', '/contact'],\\n          exclude: ['/admin/*'],\\n        },\\n      }),\\n\\n      qwikVite({\\n        // Qwik optimizer options\\n        optimizerOptions: {\\n          // Strip console.log in production\\n          debug: false,\\n\\n          // Custom entry strategy\\n          entryStrategy: {\\n            type: 'smart',\\n          },\\n        },\\n\\n        // Client build options\\n        client: {\\n          outDir: 'dist/client',\\n          manifestPrefix: 'build/',\\n        },\\n\\n        // SSR build options\\n        ssr: {\\n          outDir: 'dist/ssr',\\n        },\\n\\n        // Development server options\\n        devTools: {\\n          enabled: true,\\n          clickToSource: true,\\n        },\\n      }),\\n\\n      tsconfigPaths(),\\n    ],\\n\\n    // Vite config\\n    server: {\\n      port: 3000,\\n      host: true,\\n    },\\n\\n    build: {\\n      target: 'es2020',\\n      rollupOptions: {\\n        output: {\\n          manualChunks: undefined,\\n        },\\n      },\\n    },\\n\\n    preview: {\\n      port: 4173,\\n    },\\n  };\\n});\\n```\\n\\n### Deployment Adapter Configuration\\n\\nDeploy Qwik applications to various platforms with adapters.\\n\\n```typescript\\n// adapters/node-server/vite.config.ts\\nimport { defineConfig } from 'vite';\\nimport { qwikVite } from '@builder.io/qwik/optimizer';\\nimport { qwikCity } from '@builder.io/qwik-city/vite';\\nimport { nodeServerAdapter } from '@builder.io/qwik-city/adapters/node-server/vite';\\n\\nexport default defineConfig(() => {\\n  return {\\n    plugins: [\\n      qwikCity(),\\n      qwikVite(),\\n\\n      // Node.js server adapter\\n      nodeServerAdapter({\\n        name: 'node-server',\\n        origin: 'https://example.com',\\n        ssg: {\\n          include: ['/', '/about'],\\n          exclude: ['/admin/*'],\\n        },\\n      }),\\n    ],\\n  };\\n});\\n\\n// Cloudflare Pages adapter example\\nimport { cloudflarePagesAdapter } from '@builder.io/qwik-city/adapters/cloudflare-pages/vite';\\n\\nexport default defineConfig(() => {\\n  return {\\n    plugins: [\\n      qwikCity(),\\n      qwikVite(),\\n      cloudflarePagesAdapter(),\\n    ],\\n  };\\n});\\n\\n// Vercel Edge adapter example\\nimport { vercelEdgeAdapter } from '@builder.io/qwik-city/adapters/vercel-edge/vite';\\n\\nexport default defineConfig(() => {\\n  return {\\n    plugins: [\\n      qwikCity(),\\n      qwikVite(),\\n      vercelEdgeAdapter(),\\n    ],\\n  };\\n});\\n\\n// Static site adapter example\\nimport { staticAdapter } from '@builder.io/qwik-city/adapters/static/vite';\\n\\nexport default defineConfig(() => {\\n  return {\\n    plugins: [\\n      qwikCity(),\\n      qwikVite(),\\n      staticAdapter({\\n        origin: 'https://example.com',\\n      }),\\n    ],\\n  };\\n});\\n```\\n\\n## Summary and Integration\\n\\nQwik is designed for building enterprise-scale web applications that prioritize performance and user experience. The framework excels at content-heavy sites, e-commerce platforms, and applications where initial load performance directly impacts business metrics. By eliminating the traditional hydration step, Qwik applications start interactive immediately, with JavaScript loading only when needed. The resumability model means developers can use familiar reactive patterns while the framework handles the complexity of serialization and lazy execution.\\n\\nIntegration with existing ecosystems is straightforward through Qwik City's meta-framework capabilities and various deployment adapters. The framework supports standard web development workflows with Vite for fast development iteration, TypeScript for type safety, and familiar React-like component syntax. Server-side rendering, static site generation, and edge deployment are built-in features. The optimizer automatically handles code splitting without manual configuration, while the reactive state system provides fine-grained updates without virtual DOM diffing. Whether building a small landing page or a complex application, Qwik's architecture ensures optimal performance characteristics from day one.\\n\"}]}}]}],\"tools\":[{\"name\":\"resolve-library-id\",\"title\":\"Resolve Context7 Library ID\",\"description\":\"Resolves a package/product name to a Context7-compatible library ID and returns a list of matching libraries.\\n\\nYou MUST call this function before 'get-library-docs' to obtain a valid Context7-compatible library ID UNLESS the user explicitly provides a library ID in the format '/org/project' or '/org/project/version' in their query.\\n\\nSelection Process:\\n1. Analyze the query to understand what library/package the user is looking for\\n2. Return the most relevant match based on:\\n- Name similarity to the query (exact matches prioritized)\\n- Description relevance to the query's intent\\n- Documentation coverage (prioritize libraries with higher Code Snippet counts)\\n- Trust score (consider libraries with scores of 7-10 more authoritative)\\n\\nResponse Format:\\n- Return the selected library ID in a clearly marked section\\n- Provide a brief explanation for why this library was chosen\\n- If multiple good matches exist, acknowledge this but proceed with the most relevant one\\n- If no good matches exist, clearly state this and suggest query refinements\\n\\nFor ambiguous queries, request clarification before proceeding with a best-guess match.\",\"inputSchema\":{\"type\":\"object\",\"properties\":{\"libraryName\":{\"type\":\"string\",\"description\":\"Library name to search for and retrieve a Context7-compatible library ID.\"}},\"required\":[\"libraryName\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}},{\"name\":\"get-library-docs\",\"title\":\"Get Library Docs\",\"description\":\"Fetches up-to-date documentation for a library. You must call 'resolve-library-id' first to obtain the exact Context7-compatible library ID required to use this tool, UNLESS the user explicitly provides a library ID in the format '/org/project' or '/org/project/version' in their query.\",\"inputSchema\":{\"type\":\"object\",\"properties\":{\"context7CompatibleLibraryID\":{\"type\":\"string\",\"description\":\"Exact Context7-compatible library ID (e.g., '/mongodb/docs', '/vercel/next.js', '/supabase/supabase', '/vercel/next.js/v14.3.0-canary.87') retrieved from 'resolve-library-id' or directly from user query in the format '/org/project' or '/org/project/version'.\"},\"topic\":{\"type\":\"string\",\"description\":\"Topic to focus documentation on (e.g., 'hooks', 'routing').\"},\"tokens\":{\"type\":\"number\",\"description\":\"Maximum number of tokens of documentation to retrieve (default: 5000). Higher values provide more context but consume more tokens.\"}},\"required\":[\"context7CompatibleLibraryID\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}}],\"model\":\"claude-haiku-4.5\",\"systemPrompt\":\"You are a helpful assistant.\"}",
  "method": "POST"
}).then(response => {
  return response.json();
}).then(data => {
  console.log(data);
}).catch(error => {
  console.error('Error:', error);
});